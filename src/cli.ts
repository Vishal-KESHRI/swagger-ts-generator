#!/usr/bin/env node

import { Command } from 'commander';
import * as fs from 'fs';
import * as path from 'path';
import { SwaggerScanner } from './index';
import { SwaggerConfig } from './types';

const program = new Command();

program
  .name('swagger-scan')
  .description('Generate Swagger documentation from TypeScript projects')
  .version('1.0.0');

program
  .command('generate')
  .description('Generate Swagger documentation')
  .option('-c, --config <path>', 'Config file path', 'swagger-scan.json')
  .option('-o, --output <path>', 'Output file path', 'swagger.json')
  .option('-p, --paths <paths>', 'Scan paths (comma separated)', 'src')
  .option('-t, --title <title>', 'API title', 'API Documentation')
  .option('-v, --version <version>', 'API version', '1.0.0')
  .action(async (options) => {
    try {
      let config: SwaggerConfig;

      // Try to load config file
      if (fs.existsSync(options.config)) {
        const configContent = fs.readFileSync(options.config, 'utf-8');
        config = JSON.parse(configContent);
      } else {
        // Use CLI options
        config = {
          title: options.title,
          version: options.version,
          outputPath: options.output,
          scanPaths: options.paths.split(',').map((p: string) => p.trim())
        };
      }

      // Override with environment variables if present
      if (process.env.SWAGGER_OUTPUT_PATH) {
        config.outputPath = process.env.SWAGGER_OUTPUT_PATH;
      }
      if (process.env.SWAGGER_SCAN_PATHS) {
        config.scanPaths = process.env.SWAGGER_SCAN_PATHS.split(',').map((p: string) => p.trim());
      }

      const scanner = new SwaggerScanner();
      await scanner.generateSwagger(config);
    } catch (error) {
      console.error('❌ Error:', error);
      process.exit(1);
    }
  });

program
  .command('init')
  .description('Initialize swagger-scan configuration')
  .action(() => {
    const config: SwaggerConfig = {
      title: 'My API',
      version: '1.0.0',
      description: 'API documentation generated by swagger-scan',
      baseUrl: 'http://localhost:3000',
      outputPath: 'swagger.json',
      scanPaths: ['src']
    };

    fs.writeFileSync('swagger-scan.json', JSON.stringify(config, null, 2));
    console.log('✅ Created swagger-scan.json configuration file');
  });

program.parse();
#!/usr/bin/env node

import * as fs from 'fs';
import * as path from 'path';
import { SwaggerScanner } from './index';
import { SwaggerConfig } from './types';

const args = process.argv.slice(2);
const command = args[0];

if (!command) {
  console.log('üöÄ Swagger Genius v1.3.4');
  console.log('\nüìã Available commands:');
  console.log('  swagger-scan init     - Create configuration file');
  console.log('  swagger-scan generate - Generate swagger.json');
  process.exit(0);
}

if (command === 'generate') {
  (async () => {
    try {
      let config: SwaggerConfig;
      const configPath = 'swagger-scan.json';

      if (fs.existsSync(configPath)) {
        const configContent = fs.readFileSync(configPath, 'utf-8');
        config = JSON.parse(configContent);
        console.log('‚öôÔ∏è Using config from swagger-scan.json');
      } else {
        config = {
          title: 'API Documentation',
          version: '1.0.0',
          outputPath: 'swagger.json',
          scanPaths: ['src'],
          openApiVersion: '3.0.0'
        };
        console.log('‚öôÔ∏è Using default configuration');
      }

      if (process.env.SWAGGER_OUTPUT_PATH) {
        config.outputPath = process.env.SWAGGER_OUTPUT_PATH;
      }
      if (process.env.SWAGGER_SCAN_PATHS) {
        config.scanPaths = process.env.SWAGGER_SCAN_PATHS.split(',').map((p: string) => p.trim());
      }

      console.log('üöÄ Generating Swagger documentation...');
      const scanner = new SwaggerScanner();
      await scanner.generateSwagger(config);
    } catch (error) {
      console.error('‚ùå Error:', error);
      process.exit(1);
    }
  })();
} else if (command === 'init') {
  const config: SwaggerConfig = {
    title: 'My API',
    version: '1.0.0',
    description: 'API documentation generated by swagger-scan',
    baseUrl: 'http://localhost:3000',
    outputPath: 'swagger.json',
    scanPaths: ['src'],
    openApiVersion: '3.0.0'
  };

  fs.writeFileSync('swagger-scan.json', JSON.stringify(config, null, 2));
  console.log('‚úÖ Created swagger-scan.json configuration file');
} else {
  console.log('‚ùå Unknown command:', command);
  console.log('\nüìã Available commands:');
  console.log('  swagger-scan init     - Create configuration file');
  console.log('  swagger-scan generate - Generate swagger.json');
  process.exit(1);
}

